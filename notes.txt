From http://www.entityframeworktutorial.net/code-first/simple-code-first-example.aspx

The class that inherits from DbContext is the bridge between the database and the entity classes of the project. It is responsible for interacting with data in general terms e.g. defining connection string details or performing certain actions when certain events happen. See http://www.entityframeworktutorial.net/EntityFramework4.3/dbcontext-vs-objectcontext.aspx

If no connection string is supplied to EF Code First then the database will be created in the local SQLEXPRESS instance and named per the project. In this case the database is called ConsoleApp.SchoolContext.
See this image for the steps that are used to initialise the database:
http://www.entityframeworktutorial.net/images/codefirst/database-init-fg1.PNG

If a connection string is passed in the context's base constructor
	If database exists
		Use existing database
	Else
		Create new database
ElseIf a database name is passed in the context's base constructor
		Create database in SQLEXPRESS with that database name
Else
	Create database in SQLEXPRESS with name derives from namespace and context name.

General steps to set up EF in a project:
	. Install it via NuGet or Package Manager
	. Create entity or domain classes with standard properties. 
	. Create context class inheriting from DbContext.
	. Add DbSet properties for each entity to the context class.
	
EF uses conventions to infer properties of each table based on the entity classes. Primary keys will be ints and named either 'Id' or '<table>Id'. Foreign keys will be named '<table>_<column>Id'

    public class Student {
        public int StudentID { get; set; }
        public string StudentName { get; set; }
		...
        public Standard Standard { get; set; }
		// There will be a column called Standard_StandardId in the database table for this entity.
    }
	
    public class Standard {
        public int StandardId { get; set; }
        public string StandardName { get; set; }

        public ICollection<Student> Students { get; set; }
    }
	
Many other conventions are available in the System.Data.Entity.ModelConfiguration.Conventions namespace.
https://msdn.microsoft.com/en-us/library/system.data.entity.modelconfiguration.conventions%28v=vs.103%29.aspx

The page then describes adding a Teacher class without a corresponding DbSet property. When I tried to add this I got this error "The model backing the 'SchoolContext' context has changed since the database was created."

According to http://stackoverflow.com/a/6143116/ the solution is to add something like this to the SchoolContext class:
	protected override void OnModelCreating(DbModelBuilder modelBuilder)
	{
		Database.SetInitializer<SchoolContext>(null);
		base.OnModelCreating(modelBuilder);
	}
	
When I do that I get this error: "Invalid column name 'Teacher_TeacherId'."

Adding 
Database.SetInitializer(new DropCreateDatabaseIfModelChanges<SchoolContext>());

to OnModelCreating makes the error go away but it would be nice to know why it's needed and why the page doesn't discuss it.

Even without a Teacher entity class the Student table still gets a Teacher_TeacherId column and a Teachers table is created. This is type discover apparently.

The Primary Key convention is to have Id or <table_name>Id. Data Annotations or the Fluent API can be used to work around naming conventions.

The relationship between two entities is inferred through navigation properties. The two properties below will cause EF to create a one to many relationship:

	public Standard Standard { get; set; }
	...
	public ICollection<Student> Students { get; set; }
	
It is recommended to include foreign key properties. Using the Student and Standards example, one student is associated with one standand.

Of course when I try to run the code, I get an error when a foreign key definition is added because I'm trying to create a student against a non-existent standard.

{"The INSERT statement conflicted with the FOREIGN KEY constraint \"FK_dbo.Students_dbo.Standards_StandardId\". The conflict occurred in database \"ConsoleApp.SchoolContext\", table \"dbo.Standards\", column 'StandardId'.\r\nThe statement has been terminated."}

The fix for this seems to be to create a Standard first, then assign it to the Student entity.
The key point is that when a foreign key property is defined, the name of the column can be controlled. Instead of Standard_StandardId, the Student table now simply has StandardId.

Various data annotations can be added to control things like a disconnect between table and entity names, properties that should not be mapped, properties that should be used as Id columns that don't follow the naming convention and properties that should have a specific type or max length associated with them.

The Fluent API can be used by overriding OnModelCreating. This had to be done previously to fix an error.

The general format for a one to one relationship seems to be as follows:

    public class Student {
        public int StudentID { get; set; }		
		public int StandardId { get; set; }
		public string StudentName { get; set; }
		...
        public Standard Standard { get; set; }
        public virtual StudentAddress StudentAddress { get; set; }
	}
	
	public class StudentAddress {
        [Key, ForeignKey("Student")]
        public int StudentId { get; set; }
		...
        public string City { get; set; }
        public virtual Student Student { get; set; }
    }
	
	public class Standard {
        public int StandardId { get; set; }
        public string StandardName { get; set; }

        public ICollection<Student> Students { get; set; }
    }
	
	context.Students
		.Include(s => s.Standard)
		.Include(s => s.StudentAddress)
		.FirstOrDefault(s => s.StudentID == id);
	
The main entity has a primary key. The entity with which it has a one to one relationship has a primary key with the same name and a virtual property of the main entity type.

For a many-to-many relationship the general format seems to be to have a collection of each entity:
    public class Course {
	public int Id { get; set; }
		...
        public virtual ICollection<Student> Students { get; set; }
    }
	
	public class Student {
		public int StudentID { get; set; }
		...
        public virtual ICollection<Course> Courses { get; set; } 
    }
	
The above entity definitions will result in a new table being created in the database called StudentCourses. It will have Student_StudentID and Course_Id defined as primary and foreign keys.

There are a few different initialisation strategies:
	1. CreateDatabaseIfNotExists - This is the default.
	2. DropCreateDatabaseIfModelChanges - Drop an existing database and create a new one if the model classes change.
	3. DropCreateDatabaseAlways - Always drop an existing database and create a new one.
	4. Custom
	
A custom initialisation strategy is defined by creating a class that inherits from one of the initialisers.